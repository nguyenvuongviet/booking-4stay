"use client";
import React, { createContext, useContext, useState } from "react";
import axios from "axios";

interface User {
  id: number;
  fullName: string;
  email: string;
  phoneNumber?: string;
  avatar?: string;
  roleId?: number;
}

interface AuthContextType {
  user: User | null;
  token: string | null;
  setUser: (user: User | null) => void;
  logout: () => void;
  fetchUserInfo: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const [user, setUser] = useState<User | null>(null);
  const [token, setToken] = useState<string | null>(
    typeof window !== "undefined" ? localStorage.getItem("token") : null
  );

  // Lấy info user từ BE
  const fetchUserInfo = async () => {
    if (!token) return;
    try {
      const res = await axios.get("http://localhost:3069/auth/get-info", {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      setUser(res.data); // res.data = thông tin user từ BE
    } catch (err) {
      console.error("Get info failed", err);
      logout();
    }
  };

  const logout = () => {
    localStorage.removeItem("token");
    setUser(null);
    setToken(null);
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        token,
        setUser: (u) => {
          setUser(u);
          if (u) {
            // token vẫn giữ nguyên, chỉ set user
          }
        },
        logout,
        fetchUserInfo,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context)
    throw new Error("useAuth phải được dùng trong AuthProvider");
  return context;
};




// npm install @nestjs/serve-static cloudinary
// npm install --save-dev @types/cloudinary @types/express @types/multer
